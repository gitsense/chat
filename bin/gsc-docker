#!/bin/bash

# Component: gsc-docker start_app function (array-based)
# Block-UUID: 6e160942-af36-489d-b645-f9be30fe0a69
# Parent-UUID: 2c02a514-e9c4-41fa-b91c-7e741a7afaa5
# Version: 1.6.0
# Description: Manages the GitSense Chat Docker container (start, stop, admin, import, bash commands).
# Language: Bash
# Created-at: 2025-08-27T01:22:39.383Z
# Authors: Gemini 2.5 Flash Thinking (v1.3.0), Gemini 2.5 Flash (v1.4.0), Gemini 2.5 Flash (v1.5.0), Gemini 2.5 Flash (v1.6.0)


CONTAINER_NAME="gitsense-chat"
IMAGE_NAME="gitsense/chat"
DATA_VOLUME_NAME="gitsense-chat-data"
APP_PORT="3357"
ENV_FILE=".env"

# Function to check if a container exists (running or stopped)
container_exists() {
    docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"
}

# Function to check if a container is running
container_is_running() {
    docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"
}

# Function to check if a Docker volume exists
volume_exists() {
    docker volume ls --format "{{.Name}}" | grep -q "$DATA_VOLUME_NAME"
}

start_app() {
    echo "Starting GitSense Chat Docker container..."

    # Check for .env file
    if [ ! -f "$ENV_FILE" ]; then
        echo "WARNING: '$ENV_FILE' not found in the current directory ($(pwd))."
        echo "         The application might not function correctly without API keys."
        echo "         Please create a '$ENV_FILE' based on '.env.example' if needed."
    fi

    # Warn if GSC_REPOS_DIR is not set, as git import won't work
    if [ -z "$GSC_REPOS_DIR" ]; then
        echo "WARNING: GSC_REPOS_DIR environment variable is not set."
        echo "         You will not be able to import local Git repositories into GitSense Chat."
        echo "         To enable this, set GSC_REPOS_DIR to your local repositories path before starting."
    fi

    # Check if container already exists
    if container_exists; then
        if container_is_running; then
            echo "Container '$CONTAINER_NAME' is already running."
            exit 0
        else
            echo "Container '$CONTAINER_NAME' exists but is stopped. Removing it..."
            docker rm "$CONTAINER_NAME"
        fi
    fi

    # Create data volume if it doesn't exist
    if ! volume_exists; then
        echo "Creating Docker volume '$DATA_VOLUME_NAME' for persistent data..."
        docker volume create "$DATA_VOLUME_NAME"
    fi

    # Initialize an array for Docker arguments
    declare -a DOCKER_ARGS

    # Add base arguments
    DOCKER_ARGS+=("-d")
    DOCKER_ARGS+=("--name" "$CONTAINER_NAME")
    DOCKER_ARGS+=("-p" "$APP_PORT:$APP_PORT")

    # Add data volume mount
    DOCKER_ARGS+=("-v" "$DATA_VOLUME_NAME:/app/data")

    # Conditionally add .env file mount
    if [ -f "$ENV_FILE" ]; then
        DOCKER_ARGS+=("-v" "$(pwd)/$ENV_FILE:/app/$ENV_FILE:ro")
    fi

    # Add support for user-defined bind mounts for repositories
    if [ -n "$GSC_REPOS_DIR" ]; then
        # Ensure the host directory exists before attempting to mount
        if [ ! -d "$GSC_REPOS_DIR" ]; then
            echo "Error: Host repository directory '$GSC_REPOS_DIR' does not exist." >&2
            exit 1
        fi
        # Mount the host repository directory to a known path inside the container
        DOCKER_ARGS+=("-v" "$GSC_REPOS_DIR:/app/host_repos:ro") # :ro for read-only
        echo "Mounting host directory '$GSC_REPOS_DIR' to '/app/host_repos' inside the container."
    fi

    # Add restart policy and image name
    DOCKER_ARGS+=("--restart" "unless-stopped")
    DOCKER_ARGS+=("$IMAGE_NAME")

    # Run the Docker container using the array
    docker run "${DOCKER_ARGS[@]}"

    if [ $? -eq 0 ]; then
        echo "GitSense Chat container '$CONTAINER_NAME' started successfully on port $APP_PORT."
        echo "Access it at: http://localhost:$APP_PORT"
        echo "You can view logs with: docker logs -f $CONTAINER_NAME"
    else
        echo "Failed to start GitSense Chat container."
        exit 1
    fi
}

stop_app() {
    echo "Stopping GitSense Chat Docker container..."
    if container_is_running; then
        docker stop "$CONTAINER_NAME"
        echo "Container '$CONTAINER_NAME' stopped."
    else
        echo "Container '$CONTAINER_NAME' is not running."
    fi

    if container_exists; then
        echo "Removing container '$CONTAINER_NAME'..."
        docker rm "$CONTAINER_NAME"
        echo "Container '$CONTAINER_NAME' removed."
    else
        echo "Container '$CONTAINER_NAME' does not exist."
    fi
}

show_status() {
    echo "GitSense Chat container status:"
    docker ps -a --filter "name=$CONTAINER_NAME"
}

show_logs() {
    echo "GitSense Chat container logs (Ctrl+C to exit):"
    docker logs -f "$CONTAINER_NAME"
}

run_admin_tool() {
    echo "Running gsc-admin tool inside '$CONTAINER_NAME'..."
    if ! container_is_running; then
        echo "Error: GitSense Chat container '$CONTAINER_NAME' is not running." >&2
        echo "Please start it first using: $0 start" >&2
        exit 1
    fi
    # Execute the gsc-admin tool inside the container, passing all arguments
    # We use /usr/bin/env node to ensure node is found, and /app/bin/gsc-admin is the path inside the container
    docker exec -it "$CONTAINER_NAME" /usr/bin/env node /app/bin/gsc-admin "$@"
}

run_gscb_tool() {
    echo "Running gscb tool inside '$CONTAINER_NAME'..."
    if ! container_is_running; then
        echo "Error: GitSense Chat container '$CONTAINER_NAME' is not running." >&2
        echo "Please start it first using: $0 start" >&2
        exit 1
    fi
    # Execute the gscb tool inside the container, passing all arguments
    # The gscb script is located at /app/bin/gscb inside the container
    docker exec -it "$CONTAINER_NAME" /app/bin/gscb "$@"
}

run_bash_session() {
    echo "Starting bash session in '$CONTAINER_NAME'..."
    if ! container_is_running; then
        echo "Error: GitSense Chat container '$CONTAINER_NAME' is not running." >&2
        echo "Please start it first using: $0 start" >&2
        exit 1
    fi
    docker exec -it "$CONTAINER_NAME" /bin/bash
}

# Main script logic
case "$1" in
    start)
        start_app
        ;;
    admin)
        shift # Remove 'admin' from arguments
        run_admin_tool "$@"
        ;;
    stop)
        stop_app
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    bash)
        run_bash_session
        ;;
    *)
        echo "Usage: $0 {start|stop|status|logs|admin|bash}"
        exit 1
        ;;
esac

exit 0
