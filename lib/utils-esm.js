/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let fs=require("fs").promises,path=require("path"),inquirer=require("inquirer"),CHAT_CONFIG_FILENAME="chat.json",DATA_DIR=path.join(__dirname,"..","data"),CHAT_CONFIG_PATH=path.join(DATA_DIR,CHAT_CONFIG_FILENAME),BACKUPS_BASE_DIR=path.join(DATA_DIR,"backups"),CONFIG_BACKUPS_DIR=path.join(BACKUPS_BASE_DIR,"config"),MAX_BACKUPS=3;async function confirmAction(e,t=!1){return(await inquirer.default.prompt([{type:"confirm",name:"confirmation",message:e,default:t}])).confirmation}async function promptForInput(e,t=e=>!0,r=""){return(await inquirer.default.prompt([{type:"input",name:"input",message:e,default:r,validate:t}])).input}async function promptForListSelection(e,t){return(await inquirer.default.prompt([{type:"list",name:"selection",message:e,choices:t}])).selection}async function promptForNumber(e,t=e=>!isNaN(parseInt(e))&&0<=parseInt(e),r=""){return(await inquirer.default.prompt([{type:"input",name:"number",message:e,default:r,validate:e=>{e=parseInt(e);return isNaN(e)?"Please enter a valid number.":!!t(e)||"Invalid number."},filter:Number}])).number}async function readChatConfig(){try{var e=await fs.readFile(CHAT_CONFIG_PATH,"utf8");return JSON.parse(e)}catch(e){if("ENOENT"===e.code)return console.warn(`Warning: ${CHAT_CONFIG_FILENAME} not found at ${CHAT_CONFIG_PATH}. Returning empty configuration.`),{models:[],prompts:[],providers:[],cache:{},history:{},permissions:{}};throw new Error(`Failed to read ${CHAT_CONFIG_FILENAME}: `+e.message)}}async function writeChatConfig(e){await ensureDirectoryExists(CONFIG_BACKUPS_DIR),await createRollingBackup();try{var t=JSON.stringify(e,null,4);await fs.writeFile(CHAT_CONFIG_PATH,t,"utf8"),console.log(`✓ ${CHAT_CONFIG_FILENAME} updated successfully.`)}catch(e){throw new Error(`Failed to write ${CHAT_CONFIG_FILENAME}: `+e.message)}}async function ensureDirectoryExists(t){try{await fs.mkdir(t,{recursive:!0})}catch(e){if("EEXIST"!==e.code)throw new Error(`Failed to create directory ${t}: `+e.message)}}async function createRollingBackup(){await ensureDirectoryExists(CONFIG_BACKUPS_DIR);try{await fs.access(CHAT_CONFIG_PATH);var e,t=(new Date).toISOString().replace(/[-:.]/g,"").slice(0,15),r=CHAT_CONFIG_FILENAME+`.${t}.bak`,i=path.join(CONFIG_BACKUPS_DIR,r),n=(await fs.copyFile(CHAT_CONFIG_PATH,i),console.log("Backup created: "+r),(await fs.readdir(CONFIG_BACKUPS_DIR)).filter(e=>e.startsWith(CHAT_CONFIG_FILENAME+".")&&e.endsWith(".bak")).map(e=>({name:e,timestamp:e.match(/\.(\d{14})\.bak$/)?.[1]||"0",fullPath:path.join(CONFIG_BACKUPS_DIR,e)})).sort((e,t)=>e.timestamp.localeCompare(t.timestamp)));if(n.length>MAX_BACKUPS)for(e of n.slice(0,n.length-MAX_BACKUPS))await fs.unlink(e.fullPath),console.log("Removed old backup: "+e.name)}catch(e){"ENOENT"===e.code&&e.path===CHAT_CONFIG_PATH?console.log(`No existing ${CHAT_CONFIG_FILENAME} to back up.`):console.error("Error during rolling backup: "+e.message)}}async function listChatBackups(){try{return await ensureDirectoryExists(CONFIG_BACKUPS_DIR),(await fs.readdir(CONFIG_BACKUPS_DIR)).filter(e=>e.startsWith(CHAT_CONFIG_FILENAME+".")&&e.endsWith(".bak")).map(e=>{var t=e.match(/\.(\d{14})\.bak$/),t=t?t[1]:"0",r=t.substring(0,4)+`-${t.substring(4,6)}-${t.substring(6,8)} ${t.substring(8,10)}:${t.substring(10,12)}:${t.substring(12,14)} UTC`;return{name:e,timestamp:t,fullPath:path.join(CONFIG_BACKUPS_DIR,e),displayDate:r}}).sort((e,t)=>t.timestamp.localeCompare(e.timestamp))}catch(e){if("ENOENT"===e.code)return[];throw new Error("Failed to list backups: "+e.message)}}async function restoreChatConfig(e){try{await createRollingBackup(),await fs.copyFile(e,CHAT_CONFIG_PATH),console.log(`✓ ${CHAT_CONFIG_FILENAME} restored successfully from ${path.basename(e)}.`)}catch(e){throw new Error(`Failed to restore ${CHAT_CONFIG_FILENAME}: `+e.message)}}function findItem(e,t,r="name"){if("number"==typeof t){if(0<=t&&t<e.length)return{item:e[t],index:t}}else if("string"==typeof t){var i=e.findIndex(e=>e[r]===t);if(-1!==i)return{item:e[i],index:i}}return null}function insertItem(e,t,r,i=e){let n;if("number"==typeof r)n=Math.max(0,Math.min(r,e.length));else{if("string"!=typeof r)throw new Error(`Invalid position type: ${typeof r}.`);var a=r.toLowerCase().split(" ");if("top"===a[0])n=0;else if("end"===a[0])n=e.length;else if("before"===a[0]&&a[1]){var o=findItem(i,parseIdentifier(a[1]),"name");if(!o)throw new Error(`Reference item '${a[1]}' not found for 'before' position.`);n=o.index}else{if("after"!==a[0]||!a[1])throw new Error(`Invalid position format: '${r}'. Use index, 'top', 'end', 'before <num>', 'after <num>'.`);o=findItem(i,parseIdentifier(a[1]),"name");if(!o)throw new Error(`Reference item '${a[1]}' not found for 'after' position.`);n=o.index+1}}return e.splice(n,0,t),n}function moveItem(e,t,r){if(t<0||t>=e.length||r<0||r>=e.length)throw new Error("Invalid index for move operation.");var[t]=e.splice(t,1);e.splice(r,0,t)}function parseIdentifier(e){var t=parseInt(e);return isNaN(t)||String(t)!==e?e:t}async function sleep(t){return new Promise(e=>setTimeout(e,t))}module.exports={CHAT_CONFIG_PATH:CHAT_CONFIG_PATH,CONFIG_BACKUPS_DIR:CONFIG_BACKUPS_DIR,readChatConfig:readChatConfig,writeChatConfig:writeChatConfig,confirmAction:confirmAction,promptForInput:promptForInput,promptForListSelection:promptForListSelection,promptForNumber:promptForNumber,createRollingBackup:createRollingBackup,listChatBackups:listChatBackups,restoreChatConfig:restoreChatConfig,findItem:findItem,insertItem:insertItem,moveItem:moveItem,parseIdentifier:parseIdentifier,ensureDirectoryExists:ensureDirectoryExists,sleep:sleep};
