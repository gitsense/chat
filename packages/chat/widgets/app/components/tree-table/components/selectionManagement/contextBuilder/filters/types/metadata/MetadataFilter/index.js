/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let MetadataSearch=require("../../../../utils/MetadataSearch"),buildMetadataSearchQuery=require("../metadataFilterUtils").buildMetadataSearchQuery,MetadataFilterUI=require("./MetadataFilterUI"),MetadataFilterEvents=require("./MetadataFilterEvents"),MetadataFilterState=require("./MetadataFilterState"),MetadataFilterApi=require("./MetadataFilterApi"),MetadataFilterConfig=require("./MetadataFilterConfig"),MetadataFilterTypes=require("./MetadataFilterTypes");class MetadataFilter{constructor({container:e,chatApi:t,contextBuilderTable:a,onSearchTrigger:i,onFilterChange:s,onShowInsightsModal:r}){this.container=e,this.chatApi=t,this.contextBuilderTable=a,this.onSearchTrigger=i,this.onFilterChange=s,this.onShowInsightsModal=r,this.config=new MetadataFilterConfig,this.api=new MetadataFilterApi(t),this.state=new MetadataFilterState(this.api),this.ui=new MetadataFilterUI(e,this.state,this.config),this.metadataSearch=new MetadataSearch(t,a,this.config),this.events=new MetadataFilterEvents(this.ui,this.metadataSearch,this.state,this.api,this.handleApplySearchClick.bind(this),s,this.initializeAnalyzerDropdown.bind(this),this.reset.bind(this),this.handleInsightsClick.bind(this)),this.ui.renderInitialStructure(),this.events.addEventListeners()}async initializeAnalyzerDropdown(){try{await this.api.fetchAnalyzers(),this.ui.populateAnalyzerDropdown(this.api.getAnalyzers(),this.events.handleAnalyzerChange.bind(this.events))}catch(e){console.error("MetadataFilter: Failed to initialize analyzer dropdown:",e),this.showSearchMessage("Failed to load analyzers. Please try again.",!0)}}setSearchInProgress(e){this.ui.setSearchInProgress(e)}showSearchMessage(e,t=!1){this.ui.showSearchMessage(e,t)}hideSearchMessage(){this.ui.hideSearchMessage()}getState(){return this.state.getFilterState()}async applyState(e){if(e&&e.analyzerId)try{await this.api.fetchAnalyzerSchema(e.analyzerId),this.metadataSearch.setAnalyzerSchema(this.api.getAnalyzerSchema(e.analyzerId)),this.state.applyState(e),this.events.removeRuleEventListeners(),this.ui.renderRules(this.state.getRules()),this.events.addEventListenersToRules(),this.ui.updateApplyButtonState()}catch(e){console.error("MetadataFilter: Failed to apply state - could not fetch schema:",e),this.showSearchMessage("Failed to load filter state. Could not fetch analyzer schema.",!0),this.reset()}else this.reset()}reset(){this.state.reset(),this.metadataSearch.setAnalyzerSchema(null),this.events.removeRuleEventListeners(),this.ui.reset(),this.events.addEventListenersToRules(),"function"==typeof this.onFilterChange&&this.onFilterChange()}setDisabled(e){this.ui.setDisabled(e)}handleApplySearchClick(){var e=this.state.getFilterState(),t=this.contextBuilderTable.allItems,a=this.api.getAnalyzerSchema(this.state.getSelectedAnalyzerId()),e=buildMetadataSearchQuery(e,t,a);e&&this.onSearchTrigger?this.onSearchTrigger(e,"metadata"):(console.warn("MetadataFilter: Cannot trigger search. Query is empty or onSearchTrigger callback is missing."),this.showSearchMessage("Cannot apply filter: Incomplete conditions or missing analyzer.",!0))}async handleInsightsClick(e){var t,a;this.onShowInsightsModal?0===e.length?this.showSearchMessage("Please select at least one field in a rule to view insights.",!1):(t=this.state.getSelectedAnalyzerId(),a=this.state.getCurrentAnalyzerSchema(),t&&a?this.onShowInsightsModal({analyzerId:t,analyzerSchema:a,fields:e,chatApi:this.chatApi,contextBuilderTable:this.contextBuilderTable,metadataSearch:this.metadataSearch}):this.showSearchMessage("Cannot show insights: Analyzer not selected or schema not loaded.",!0)):(console.error("MetadataFilter: onShowInsightsModal callback not provided."),this.showSearchMessage("Insights feature not available. Missing callback.",!0))}setRulesFromInsights(e){this.state.resetRules();let i=new Map,s=(e.forEach(e=>{i.has(e.field)||i.set(e.field,{values:new Set,dataType:e.dataType}),i.get(e.field).values.add(e.value)}),[]);for(let[t,{values:e,dataType:a}]of i.entries()){var r=Array.from(e);"array"===a&&1<r.length?s.push({field:t,operator:"includes",dataType:a,value:r}):r.forEach(e=>{s.push({field:t,operator:"is",dataType:a,value:e})})}s.forEach(e=>this.state.addRule(e)),this.ui.renderRules(this.state.getRules()),this.events.addEventListenersToRules(),this.ui.updateApplyButtonState()}handleSaveClick(e){e.preventDefault(),console.warn("Save not implemented")}handleLoadClick(e){e.preventDefault(),console.warn("Load not implemented")}handleEditClick(e){e.preventDefault(),console.warn("Edit JSON not implemented")}handleHelpClick(e){e.preventDefault(),console.warn("Help not implemented")}}module.exports={MetadataFilter:MetadataFilter};
