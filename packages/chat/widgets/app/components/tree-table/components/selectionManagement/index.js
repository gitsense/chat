/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let createContextBuilderModal=require("./contextBuilder").createContextBuilderModal,createSelectionOptions=require("./selectionOptions").createSelectionOptions,createSelectionDropdowns=require("./selectionDropdowns").createSelectionDropdowns,createSelectionInfoRow=require("./selectionInfoRow").createSelectionInfoRow,createSelectionWarning=require("./selectionWarning").createSelectionWarning,addOrUpdateLoadedSelection=require("./loaded/loadedStorage").addOrUpdateLoadedSelection,createLoadedSelections=require("./loaded").createLoadedSelections,arrayToTree=require("../../utils/treeUtils").arrayToTree;function createSelectionManagement({state:d,chatApi:l,batchChatsSize:e,showCheckboxes:t,onConfigChange:s,onAddContext:p}){if(!p||"function"!=typeof p)throw new Error("Required onAddContext callback function not defined");let u=createContextBuilderModal({state:d,chatApi:l,batchChatsSize:e,saveCurrentSelection:g});var o=document.createElement("div"),n=(o.className="selection-management-component",document.createElement("div")),n=(n.className="sticky-sentinel",n.style.position="absolute",n.style.height="1px",n.style.top="-1px",o.appendChild(n),document.createElement("div")),r=(n.className="selection-combined-container",document.createElement("div"));r.className="loaded-selections-container";let i=createLoadedSelections({container:r,contextBuilderModal:u,showCheckboxes:t,onItemClick:async(e,t=!1)=>{var o=e.selectedNodes;let n=new Set;var r,a,i;for(let e=1;e<10;e++){let t=null;for(let e=0;e<o.length;e++){var c=o[e];if(c&&!n.has(c)){t=c;break}}if(!t)break;d.findNodeById(t)?n.add(t):(i=((a=[...(r=await l.getGitRefChatByFamilyMember(t)).descendants]).unshift(r),arrayToTree(a,"desc",r.id)),d.addChildrenToNode(r.id,i),a.forEach(e=>n.add(e.id)))}d.clearSelections(),e.selectedNodes.forEach(e=>{d.toggleNodeSelection(e,!0)}),e.selectionOptions&&(d.selectionOptions={...e.selectionOptions}),t?s():(m(),0<(t=d.getSelectedNodes()).length&&u.show(t,e.contentType,e.contentOption,"review",{onclickAddDefault:(e,t)=>{p&&"function"==typeof p&&p(e,t)}}))}});t=createSelectionOptions({state:d,onSelectionOptionsChange:()=>{s&&s()}});let a=createSelectionDropdowns({state:d,onDropdownChange:()=>{s&&s()}}),c=createSelectionInfoRow({state:d,chatApi:l,contextBuilderModal:u,contextBuilderModal:u,batchChatsSize:e,onSelectionLoaded:()=>{i.refresh()},onAddContext:(e,t)=>{p&&"function"==typeof p&&p(e,t)}}),h=createSelectionWarning({state:d}),f=document.createElement("div");function m(){a.update(),c.update(),h.update(),i.refresh(),f.textContent=""}function S(e,t="error"){f.textContent=e,f.style.color="success"===t?"green":"red"}function g(e,t,o=!1){d.getSelectedNodes();var n=d.selectionOptions;let r=n.selectedType;var a=n.selectedOption,t=t.map(e=>{e=d.findNodeById(e.id);return"file content"===r&&"git-blob"!==e.type?null:e.id}).filter(e=>null!==e);if(0===t.length)return{success:!1,error:"No valid items selected to save."};try{return addOrUpdateLoadedSelection(t,n,r,a,e,o),i.refresh(),{success:!0}}catch(e){return console.error("Error saving selection:",e),{success:!1,error:"Error saving selection: "+(e.message||"Unknown error")}}}return f.className="selection-message-area",f.style.marginTop="8px",f.style.fontSize="12px",n.appendChild(t),n.appendChild(a.element),n.appendChild(c.element),o.appendChild(n),o.appendChild(r),{element:o,updateSelectionUI:m,loadContextFromJson:async function(t){if(f.textContent="",t){let e;try{if(e=JSON.parse(t),!Array.isArray(e))throw new Error("Data is not a JSON array.");e.some(e=>"string"!=typeof e&&"number"!=typeof e)&&console.warn("JSON array contains non-string/non-number elements. Proceeding, but expected Chat IDs.")}catch(e){return void S(`Invalid JSON: ${e.message}. Expected an array of Chat IDs.`)}if(0===e.length)S("JSON array is empty. No Chat IDs to load.");else{let o=[],n=[];if(e.forEach(e=>{var t=d.findNodeById(e);t?o.push(t):n.push(e)}),0<n.length&&console.warn("Could not find nodes for IDs: "+n.join(", ")),0===o.length)S("No matching chats found for the provided IDs.");else try{await u.loadFromNodeIds(o,d.selectionOptions.selectedType,d.selectionOptions.selectedOption);var r="Clipboard Load "+(new Date).toLocaleString();addOrUpdateLoadedSelection(o.map(e=>e.id),d.selectionOptions,d.selectionOptions.selectedType,d.selectionOptions.selectedOption,r),i.refresh(),S(`Successfully loaded context for ${o.length} chat(s).`,"success")}catch(e){console.error("Error loading context via modal:",e),S("Error loading context: "+(e.message||"Unknown error"))}}}else S("No JSON data provided.")},saveCurrentSelection:g,contextBuilderModal:u,destroy:()=>{observer&&observer.disconnect()}}}module.exports={createSelectionManagement:createSelectionManagement};
