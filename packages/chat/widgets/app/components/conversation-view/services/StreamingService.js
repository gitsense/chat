/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let DomUtils=require("../utils/DomUtils"),ScrollUtils=require("../utils/ScrollUtils"),MarkdownUtils=require("../utils/MarkdownUtils"),ScrollIntentState=require("../utils/ScrollIntentManager").ScrollIntentState;class StreamingService{constructor(e){this.widget=e.widget,this.settings=e.settings,this.chat=e.chat,this.message=e.message,this.model=e.message.real_model||e.message.model,this.response="",this.eventSource=null,this.checkForStopStreaming=null,this.stopStreaming=!1,this.streamingInProgress=!1,this.md=e.md,this.chatInput=e.chatInput,this.contentBody=e.contentBody||null,this.tempBody=this.contentBody?this.contentBody.cloneNode(!0):null,this.messagesContainer=e.messagesContainer||document.body,this.scrollableElement=e.scrollOptions?.scrollableElement||window,this.scrollThreshold=e.scrollOptions?.scrollThreshold||200,this.codeBlockObservers=new WeakMap,this.mutationObserver=null,this.updateScrolling=e.updateScrolling,this.scrollIntentManager=null,this.newMessagesIndicator=null,this.scrollStateChangeHandler=this.handleScrollStateChange.bind(this),this.onMessage=e.onMessage||(()=>{}),this.onComplete=e.onComplete||(()=>{}),this.onError=e.onError||(()=>{})}handleScrollStateChange(e,t){e===ScrollIntentState.USER_INTERRUPTED&&this.streamingInProgress?(this.newMessagesIndicator||(this.newMessagesIndicator=ScrollUtils.createNewMessagesIndicator(document.body,()=>{ScrollUtils.scrollToBottom(this.scrollableElement,this.contentBody,0,"smooth",!0),this.scrollIntentManager&&this.scrollIntentManager.forceAutoScrolling()})),this.newMessagesIndicator.show()):e===ScrollIntentState.AUTO_SCROLLING&&t===ScrollIntentState.USER_INTERRUPTED&&this.newMessagesIndicator&&this.newMessagesIndicator.hide()}startStreaming(e=!0,t=null){this.chatInput&&this.chatInput.showStopBtn(),this.contentBody&&(!this.scrollIntentManager&&e&&(s=ScrollUtils.setupEnhancedScrollDetection(t||this.scrollableElement,{scrollThreshold:this.scrollThreshold,onScrollStateChange:this.scrollStateChangeHandler}).intentManager,this.scrollIntentManager=s,this.scrollIntentManager.forceAutoScrolling()),this.contentBody.style.color="gray",this.contentBody.innerHTML=`<p style='font-size:13px;'>${this.model}</p>`+"<p>Waiting for response...</p>",e&&ScrollUtils.scrollToBottom(t||this.scrollableElement,this.contentBody),this.initCodeBlockObserver());var s=new URLSearchParams,s=(s.set("message-id",this.message.id),s.set("chat-uuid",this.chat.uuid),s.set("provider",this.getProvider()),this.widget.streamURL+"?"+s.toString());this.eventSource=new EventSource(s),this.eventSource.onerror=this.handleError.bind(this),this.eventSource.onmessage=this.handleMessage.bind(this,e,t),this.checkForStopStreaming=setInterval(this.checkStopStreaming.bind(this),50)}initCodeBlockObserver(){this.mutationObserver=new MutationObserver(e=>{e.forEach(e=>{"childList"===e.type&&0<e.addedNodes.length&&this.findAndObserveCodeBlocks()})}),this.mutationObserver.observe(this.contentBody,{childList:!0,subtree:!0})}findAndObserveCodeBlocks(){this.contentBody.querySelectorAll("pre").forEach(e=>{var t;this.codeBlockObservers.has(e)||(t=new MutationObserver(()=>{this.scrollCodeBlockToBottom(e)}),this.codeBlockObservers.set(e,t),t.observe(e,{childList:!0,subtree:!0,characterData:!0}),this.scrollCodeBlockToBottom(e))})}scrollCodeBlockToBottom(e){this.streamingInProgress&&e&&(this.scrollIntentManager&&!this.scrollIntentManager.shouldAutoScroll()||(e.scrollTop=e.scrollHeight))}disconnectCodeBlockObservers(){this.mutationObserver&&(this.mutationObserver.disconnect(),this.mutationObserver=null),this.contentBody.querySelectorAll("pre").forEach(e=>{var t=this.codeBlockObservers.get(e);t&&(t.disconnect(),this.codeBlockObservers.delete(e))})}stopStream(){this.stopStreaming=!0}handleError(e){switch(console.error("EventSource failed:",e),this.eventSource.readyState){case EventSource.CONNECTING:console.log("Reconnecting...");break;case EventSource.OPEN:console.log("Open");break;case EventSource.CLOSED:console.log("Connection Closed");break;default:console.log("Connection Error")}this.contentBody&&"Waiting for response..."===this.contentBody.innerText&&(this.contentBody.innerHTML="Error connecting to server. Please try again."),this.streamingStopped(e)}handleMessage(e,t,s){let o=null;this.contentBody&&(o=ScrollUtils.trackScrollPosition(t||this.scrollableElement),""===this.response)&&(this.contentBody.style.color=null,this.contentBody.innerHTML=""),this.streamingInProgress=!0;var{content:n,done:r}=JSON.parse(s.data);if(null!=n&&(this.response+=n),this.contentBody){this.tempBody.innerHTML=`<p style='font-size:13px;'>${this.model}</p>`+this.md.render(this.response);try{DomUtils.updateDOM(this.tempBody,this.contentBody)}catch(e){}this.findAndObserveCodeBlocks();n=o();!e||this.scrollIntentManager&&!this.scrollIntentManager.shouldAutoScroll()?e&&n.heightChanged&&!n.scrollChanged&&this.scrollIntentManager&&this.scrollIntentManager.getState()===ScrollIntentState.USER_INTERRUPTED&&(this.newMessagesIndicator||(this.newMessagesIndicator=ScrollUtils.createNewMessagesIndicator(document.body,()=>{ScrollUtils.scrollToBottom(t||this.scrollableElement,this.contentBody,0,"smooth",!0),this.scrollIntentManager&&this.scrollIntentManager.forceAutoScrolling()})),this.newMessagesIndicator.show()):ScrollUtils.scrollToBottom(t||this.scrollableElement,this.contentBody)}r&&this.streamingStopped(),this.onMessage&&this.onMessage(this.response,s)}checkStopStreaming(){this.stopStreaming&&(clearInterval(this.checkForStopStreaming),this.checkForStopStreaming=null,this.response+="\n\n---\n\n**Warning: Response was interrupted and may be incomplete.**",this.contentBody&&(this.tempBody.innerHTML=this.md.render(this.response),DomUtils.updateDOM(this.tempBody,this.contentBody)),this.streamingStopped(null,!0))}streamingStopped(e,t){this.newMessagesIndicator&&this.newMessagesIndicator.hide(),this.checkForStopStreaming&&clearInterval(this.checkForStopStreaming),this.chatInput&&this.chatInput.showGoBtn(),this.contentBody&&(MarkdownUtils.addSignature(this.contentBody,this.model),this.disconnectCodeBlockObservers()),this.eventSource.close(),this.message.message=this.response,this.stopStreaming=!1,this.streamingInProgress=!1,this.tempBody=null,this.scrollIntentManager&&this.scrollIntentManager.shouldAutoScroll()&&ScrollUtils.scrollToBottom(this.scrollableElement,this.contentBody,0,"smooth");let s=this.onComplete;setTimeout(()=>{s(this.message,e,t)},50)}cleanup(){var e;this.eventSource&&this.eventSource.close(),this.checkForStopStreaming&&clearInterval(this.checkForStopStreaming),this.disconnectCodeBlockObservers(),this.newMessagesIndicator&&(this.newMessagesIndicator.element.parentNode&&this.newMessagesIndicator.element.parentNode.removeChild(this.newMessagesIndicator.element),this.newMessagesIndicator=null),this.scrollIntentManager&&((e=this.scrollableElement===window?document.documentElement:this.scrollableElement)._scrollIntentManager===this.scrollIntentManager&&delete e._scrollIntentManager,this.scrollIntentManager=null)}getProvider(){if(this.model.match(/^Fake/))return"Fake Provider";var t=this.settings.models;for(let e=0;e<t.length;e++){var{name:s,providers:o}=t[e];if(!s.match(/^---/)&&s===this.model)return o[0].name}return"Unknown Provider"}}module.exports={StreamingService:StreamingService};
