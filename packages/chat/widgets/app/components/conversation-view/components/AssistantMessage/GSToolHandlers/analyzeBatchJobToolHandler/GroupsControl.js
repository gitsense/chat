/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let DomUtils=require("../../../../utils/DomUtils"),JobUtils=require("./JobUtils"),GroupsTable=require("./GroupsTable"),h=DomUtils.h;class GroupsControl{constructor(t,e,i,s,l){this.parentElem=t,this.context=e,this.batchJobId=i,this.batchType=s,this.onGroupReset=l,this.allGroupDetails=[],this.lastPolledAt=null,this.isJobFinal=!1,this.activeFilters={"filter-all":!0,"filter-pending":!1,"filter-running":!1,"filter-succeeded":!1,"filter-failed":!1,"filter-other":!1},this.groupsContainer=null,this.groupStatusCheckboxesContainer=null,this.filterCheckboxes={},this.groupCountSpans={},this.newDataNotification=null,this.refreshTableLink=null,this.notificationIntervalId=null,this.groupsTable=null,this._renderInitialUI(),this._attachEventListeners(),this._handleFilterChange=this._handleFilterChange.bind(this),this._handleRefreshTableClick=this._handleRefreshTableClick.bind(this)}_renderInitialUI(){this.groupsContainer=h.createDiv({id:"analyze-batch-job-groups-container",style:{display:"flex",flexDirection:"column",gap:"0px",paddingTop:"15px"},append:[h.createH3({style:{margin:"0",fontSize:"1.2em",color:"#555",borderBottom:"0px"},append:[h.createText("Groups")]}),this.groupStatusCheckboxesContainer=h.createDiv({id:"group-status-row",style:{display:"flex",flexWrap:"wrap",gap:"15px",alignItems:"center",marginTop:"10px",padding:"10px 0"},append:this._renderGroupStatusCheckboxes(this.activeFilters)}),this.newDataNotification=h.createDiv({id:"new-data-notification",style:{marginTop:"0px",marginTop:"10px",color:"#555",textAlign:"left",fontSize:".9em",padding:"7px 0px"},text:"Checking for updates..."})]}),this.parentElem.appendChild(this.groupsContainer),this._getCheckboxAndCountSpanReferences();var t="realtime"===this.batchType;this.groupsTable=new GroupsTable(this.groupsContainer,this.batchJobId,this.context,{onGroupReset:this.onGroupReset,showResetColumn:t})}_renderGroupStatusCheckboxes(e){return[{id:"filter-all",label:"All",countId:"all-groups-count"},{id:"filter-pending",label:"Pending",countId:"pending-groups-count"},{id:"filter-running",label:"Running",countId:"running-groups-count"},{id:"filter-succeeded",label:"Succeeded",countId:"Succeeded-groups-count"},{id:"filter-failed",label:"Failed",countId:"failed-groups-count"},{id:"filter-other",label:"Other",countId:"other-groups-count"}].map(t=>h.createDiv({append:[h.createInput({type:"checkbox",id:t.id,checked:e[t.id]}),h.createText(` ${t.label} (`),h.createSpan({id:t.countId,text:"0"}),h.createText(")")]}))}_getCheckboxAndCountSpanReferences(){Object.keys(this.activeFilters).forEach(t=>{var e=this.groupsContainer.querySelector("#"+t);e&&(this.filterCheckboxes[t]=e,e=t.replace("filter-","")+"-groups-count",this.groupCountSpans[t]=this.groupsContainer.querySelector("#"+e))}),this.groupCountSpans["filter-all"]=this.groupsContainer.querySelector("#all-groups-count")}_attachEventListeners(){Object.values(this.filterCheckboxes).forEach(t=>{t.addEventListener("change",t=>{this._handleFilterChange(t)})})}update(t,e,i){var s=this.allGroupDetails,e=(this.allGroupDetails=t,this.lastPolledAt=e,this.isJobFinal=i,JobUtils.calculateGroupCounts(t)),i=(this._updateGroupCounts(e),JSON.stringify(s)!==JSON.stringify(t)),e=1===this.groupsTable.currentPage;i?e?(this.groupsTable.render(this.allGroupDetails,this.activeFilters,this.lastPolledAt),this._updateNotification(!1,this.lastPolledAt,this.isJobFinal)):this._updateNotification(!0,this.lastPolledAt,this.isJobFinal):this._updateNotification(!1,this.lastPolledAt,this.isJobFinal)}_updateGroupCounts(t){this.groupCountSpans["filter-all"].textContent=t.ALL,this.groupCountSpans["filter-pending"].textContent=t.PENDING,this.groupCountSpans["filter-running"].textContent=t.RUNNING,this.groupCountSpans["filter-succeeded"].textContent=t.SUCCEEDED,this.groupCountSpans["filter-failed"].textContent=t.FAILED,this.groupCountSpans["filter-other"].textContent=t.OTHER}_handleFilterChange(t){var e=t.target.id;this.activeFilters[e]=t.target.checked,"filter-all"===e?Object.keys(this.activeFilters).forEach(t=>{"filter-all"!==t&&(this.activeFilters[t]=!1,this.filterCheckboxes[t].checked=!1)}):(this.filterCheckboxes["filter-all"].checked,t.target.checked&&(this.activeFilters["filter-all"]=!1,this.filterCheckboxes["filter-all"].checked=!1)),this.groupsTable.currentPage=1,this.groupsTable.render(this.allGroupDetails,this.activeFilters,this.lastPolledAt),this._updateNotification(!1,this.lastPolledAt,this.isJobFinal)}_updateNotification(t,e,i=!1,s=null){let l="",a="",r="transparent",n="transparent",o=!1,h="#555";s?(l="Error: "+s,r="#f8d7da",n="#dc3545",h="#721c24"):i?(l="Job "+(this.allGroupDetails[0]?.status?.toLowerCase()||"completed"),"SUCCEEDED"===this.allGroupDetails[0]?.status?(r="#d4edda",n="#28a745",h="#155724"):"FAILED"!==this.allGroupDetails[0]?.status&&"CANCELLED"!==this.allGroupDetails[0]?.status||(r="#f8d7da",n="#dc3545",h="#721c24")):t?(l="New data available. ",a='<a href="#" id="refresh-table-link" style="color: #007bff; text-decoration: underline;">Click to refresh table.</a>',r="#e0f7fa",n="#b2ebf2",h="#006064"):(l="Table is up-to-date. Last checked: ",o=!0);let c=l;o?c+=`<span id="last-checked-time">${JobUtils.formatRelativeTime(e)}</span>.`:s||i||(c+=a),this.newDataNotification.innerHTML=c,JobUtils.stopRelativeTimeUpdater(this.notificationIntervalId),this.notificationIntervalId=null,o&&e&&(this.notificationIntervalId=JobUtils.startRelativeTimeUpdater(this.newDataNotification.querySelector("#last-checked-time"),e)),this.refreshTableLink=this.newDataNotification.querySelector("#refresh-table-link"),this.refreshTableLink&&(this.refreshTableLink.removeEventListener("click",this._handleRefreshTableClick),this.refreshTableLink.addEventListener("click",this._handleRefreshTableClick))}_handleRefreshTableClick(t){t.preventDefault(),this.allGroupDetails&&(this.groupsTable.render(this.allGroupDetails,this.activeFilters,this.lastPolledAt),this._updateNotification(!1,this.lastPolledAt,this.isJobFinal))}cleanup(){Object.values(this.filterCheckboxes).forEach(t=>{t.removeEventListener("change",this._handleFilterChange)}),this.refreshTableLink&&this.refreshTableLink.removeEventListener("click",this._handleRefreshTableClick),this.groupsTable.cleanup(),JobUtils.stopRelativeTimeUpdater(this.notificationIntervalId),this.groupsContainer&&this.groupsContainer.parentElement&&this.groupsContainer.remove(),console.log("Cleaned up GroupsControl.")}}module.exports=GroupsControl;
