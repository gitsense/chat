/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let crypto=require("crypto"),{CodeBlockUtils,ChatUtils,isContextMessage,GSToolBlockUtils}=require("@gitsense/gsc-utils"),DomUtils=require("../../utils/DomUtils"),MessageUtils=require("../../utils/MessageUtils"),CodeBlock=require("../CodeBlock"),renderMessage=require("./renderMessage").renderMessage,handleCodeBlockContinuation=require("./codeBlockContinuationHandler").handleCodeBlockContinuation,handleHelpMessage=require("./helpMessageHandler").handleHelpMessage,handlePatch=require("./patchHandler").handlePatch,handleContextMessage=require("./contextMessageHandler").handleContextMessage,handleAnalyze=require("./analyzeHandler").handleAnalyze,handleNewAnalyzer=require("./newAnalyzerHandler").handleNewAnalyzer,handleSplitMessage=require("./splitMessageHandler").handleSplitMessage,handleChatIds=require("./chatIdsHandler").handleChatIds,handleGitSenseChatTools=require("./GSToolHandlers/gitsenseChatToolHandler").handleGitSenseChatTools,handleGitSenseChatDemo=require("./gitsenseChatDemoHandler").handleGitSenseChatDemo;async function renderAssistantMessages(a,e,t,n,l,r,o){if(!r)throw new Error("No events defined");if(!o||"function"!=typeof o)throw new Error("renderUserMessage function not defined");if(0!==a.length){for(let e=0;e<a.length;e++){var{id:i,role:d,model:h,temperature:c}=a[e];if("assistant"!==d)throw new Error(`Expecting a assistant message but found a ${d} message instead`);if(!h)throw new Error("No model defined for the assistant message #"+i);if(null==c)throw new Error("No temperature defined for the assistant message #"+i)}var g=MessageUtils.mapModel2Messages(a),u=g[t];if(!u||!u.length)throw new Error("No main model messages for "+t);let s=u[0];var u=s.kids,C=n.renderedMessage[s.id];if(C){let e=C.contentBody;var M=s.message,m=M?.replace(/\n\nAuthored by LLM.+$/,"")||"",p=crypto.createHash("md5").update(m).digest("hex"),w=s.meta?.noRerender||!1,f=s.meta?.onlyDemoHandler||!1;let a=!(w||!C.reRender&&p===C.md5);if(a=w||!M?.includes("# GitSense Chat Tool")&&!M?.trimStart().startsWith("# GitSense Chat Analysis")?a:!0){var w=CodeBlockUtils.extractCodeBlocks(m,{silent:!0}).blocks;let a=[];w.forEach(e=>{e=e.content;try{GSToolBlockUtils.isToolBlock(e)&&a.push(GSToolBlockUtils.parseToolBlock(e))}catch(e){}});M=s.message.includes("UUID")?35:5;isContextMessage(s.message)?(await handleContextMessage(s,e,n,r),await handleGitSenseChatTools(s,e,n,r)):"help"===s.type?((w=e.cloneNode(!0)).innerHTML=n.md.render(m),DomUtils.updateDOM(w,e),w.innerHTML="",handleSplitMessage(s,e,n,r),await handleHelpMessage(s,e,n,r),CodeBlock.addClipboards(e,M)):f||(handleSplitMessage(s,e,n,r),(f=(w=a.find(e=>"search"===e.tool))?.config?.states?w.config.states:null)&&null===f[f.length-1].finished_at||((w=e.cloneNode(!0)).innerHTML=n.md.render(m),DomUtils.updateDOM(w,e),w.innerHTML=""),await handleGitSenseChatTools(s,e,n,r),await handleAnalyze(s,e,n,r),await handleNewAnalyzer(s,e,n,r),CodeBlock.addClipboards(e,M),CodeBlock.addPreFoldLinks(e,s,n.messageStateManager,n.hljs),s.type.startsWith("git"))||setTimeout(async()=>{await handlePatch(s,e,n,r),await handleChatIds(s,e,n,r);CodeBlock.addCodeBlockControls(e,n.chat,s,n.widget,n.codeBlockService,n.hljs)},1e3),C.md5=p,C.reRender=!1,C.cleanedContent=m,n.navigationService.scrollToBottom(),await handleGitSenseChatDemo(s,e,n,r)}}else await renderMessage(s,e,t,g,n,l,r);u.length&&(w=(f=u[0]).role,"user"===w?await o(f,a[0],t,n,l,r,renderAssistantMessages):await renderAssistantMessages(u,f,t,n,l,r,o))}}module.exports={renderAssistantMessages:renderAssistantMessages};
