/*
 * GitSense Chat - Minified Distribution File
 *
 * This JavaScript file is part of the minified distribution of GitSense Chat.
 * It has been optimized (minified) for performance and efficient delivery.
 *
 * This software is permitted for internal use and modification.
 * Copying for profit or redistribution is strictly not permitted.
 *
 * The Fair License, which formalizes these terms, will be adopted as the official license in the future.
 * Once finalized, the unminified source code will be freely available for internal use for non-
 * commercial purposes.
 *
 * This software may not be used to develop or enhance any product or service that competes
 * directly or indirectly with GitSense Chat without explicit permission.
 *
 * Copyright (c) 2025 GitSense. All rights reserved.
 */

let DomUtils=require("../../../../utils/DomUtils"),GSToolBlockUtils=require("../../../../utils/GSToolBlockUtils"),ANALYZE_BATCH_JOB_TOOL=require("../constants").ANALYZE_BATCH_JOB_TOOL,getAnalyzeBatchDetails=require("../../../../Dependencies").getAnalyzeBatchDetails,JobUtils=require("./JobUtils"),Overview=require("./Overview"),GroupsControl=require("./GroupsControl"),MetadataFieldsControl=require("../../../MetadataInsights/MetadataFieldsControl"),h=DomUtils.h;class JobUI{constructor(t,i,e,o){this.message=t,this.contentBody=i,this.context=e,this.toolConfig=o,this.contextBuilderNodes=this._getContextBuilderNodes(),this.batchJobId=o.batchJobId,this.batchType=o.batchType,this.statusUpdateInterval=o.statusUpdateInterval,this.analyzerId=o.analyzerId,this.currentBatchDetails=null,this.pollingIntervalId=null,this.uiContainer=null,this.overviewContainer=null,this.groupsContainer=null,this.insightsContainer=null,this.overview=null,this.groupsControl=null,this.metadataFieldsControl=null,this._onJobCancelled=this._onJobCancelled.bind(this),this._pollBatchDetails=this._pollBatchDetails.bind(this)}async init(){this._removeExistingToolBlocks(),this._renderInitialUI(),await this._pollBatchDetails(),this._startPolling()}_removeExistingToolBlocks(){var t=GSToolBlockUtils.getToolBlockElemsByTool(this.contentBody,ANALYZE_BATCH_JOB_TOOL);t.length&&t.forEach(t=>t.parentNode.removeChild(t)),this.contentBody.innerHTML=""}_renderInitialUI(){this.overviewContainer=h.createDiv({id:"analyze-batch-job-overview-wrapper"}),this.groupsContainer=h.createDiv({id:"analyze-batch-job-groups-wrapper",style:{marginBottom:"20px"}}),this.insightsContainer=h.createDiv({id:"analyze-batch-job-insights-wrapper"}),this.uiContainer=h.createDiv({id:"analyze-batch-job-container",style:{display:"flex",flexDirection:"column",gap:"0px"},append:[this.overviewContainer,this.groupsContainer,this.insightsContainer]}),this.contentBody.appendChild(this.uiContainer),this.overview=new Overview(this.overviewContainer,this.context,this.batchJobId,this.batchType,this.analyzerId,this._onJobCancelled),this.groupsControl=new GroupsControl(this.groupsContainer,this.context,this.batchJobId),this.metadataFieldsControl=new MetadataFieldsControl(this.insightsContainer,this.context,this.analyzerId,this.contextBuilderNodes)}_getContextBuilderNodes(){let i=[];return this.toolConfig.originalGroups.forEach(t=>{t.chatIds&&Array.isArray(t.chatIds)&&t.chatIds.forEach(t=>{i.push(t)})}),i}_startPolling(){this.pollingIntervalId&&this._stopPolling(),this.pollingIntervalId=setInterval(this._pollBatchDetails,this.statusUpdateInterval),console.log(`Started polling for batch job ${this.batchJobId} every ${this.statusUpdateInterval/1e3} seconds.`)}_stopPolling(){this.pollingIntervalId&&(clearInterval(this.pollingIntervalId),this.pollingIntervalId=null),console.log(`Stopped polling for batch job ${this.batchJobId}.`)}async _pollBatchDetails(){try{var t=await getAnalyzeBatchDetails(this.context.widget,this.batchJobId);if(!t)throw new Error("No batch details found for job ID: "+this.batchJobId);t.lastPolledAt=(new Date).toISOString(),this.currentBatchDetails=t,this.overview.update(t),this.groupsControl.update(t.groupDetails,t.lastPolledAt,JobUtils.isJobFinal(t.status)),this.metadataFieldsControl.update(t.groupDetails),JobUtils.isJobFinal(t.status)&&this._stopPolling()}catch(t){console.error(`Error fetching batch details for job ${this.batchJobId}:`,t),this.groupsControl._updateNotification(!1,(new Date).toISOString(),!0,"Error: "+t.message),this._stopPolling()}}_onJobCancelled(){console.log("JobUI: Cancellation confirmed by Overview. Triggering immediate poll."),this._pollBatchDetails()}cleanup(){this._stopPolling(),this.overview&&this.overview.cleanup(),this.groupsControl&&this.groupsControl.cleanup(),this.metadataFieldsControl&&this.metadataFieldsControl.cleanup(),this.uiContainer&&this.uiContainer.parentElement&&this.uiContainer.remove(),console.log(`Cleaned up JobUI for job ${this.batchJobId}.`)}}module.exports=JobUI;
